let VERSION = "Shelly-3.0.0-beta6";

// Settings
let CONFIG = {
    updatePeriod: 15000,
    apiEndpoint: "https://api.porssari.fi/getcontrols.php",
    returnTimestamps: 10,
    jsonVersion: 2,
    jsonChannelNames: false,
    logLevel: 0, // 0=debug, 1=info, 2=warn, 3=error
};

// Global variables
let shellyApp, shellyMac, shellyFwVer, scriptId, deviceChannels;
let currentUnixTime, jsonValidUntil, shellyUptime;
let lastRequest, lastRequestHttpCode;
let controlsData = controlsInitialized = isCallBusy = isCallDelay = isFailsafe = false;
let mainCycleCounter = 20;
let cyclesUntilRequest = 20;
let mainTimer;

// Global dictionaries
let channelLastControlTimeStamps = [];
let shellyCallQueue = [];

// Logger
const LOG = {
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3
};

function log(level, message) {
    if (level >= CONFIG.logLevel) {
        console.log(message);
    }
}

// Program init functions
function init() {
    log(LOG.ERROR, "Pörssäri Control Script, version: " + VERSION);
    try {
        log(LOG.INFO, "Retrieving device information...");
        enqueueShellyCall('Shelly.GetDeviceInfo', {}, InitCallback);
    } catch (e) {
        log(LOG.ERROR, "An error occurred while retrieving device information. Stopping script. " + e);
        return;
    }
}

function InitCallback(result) {
    shellyApp = result.app;
    shellyMac = result.mac;
    shellyFwVer = result.ver;
    result = null;
    scriptId = (parseFloat(shellyFwVer) >= 1.5) ? Script.id : Shelly.getCurrentScriptId();
    
    if (shellyMac.length > 0) {
        log(LOG.DEBUG, "Device info: device " + shellyApp + ", id " + shellyMac + ", firmware version " + shellyFwVer + ", script-id " + scriptId);
    } else {
        log(LOG.ERROR, "Could not get valid device information. Stopping script.");
        return;
    }
    
    // Program loop timer
    mainTimer = Timer.set(CONFIG.updatePeriod, true, MainCycle);
    if (!mainTimer) {
        log(LOG.ERROR, "Main timer not initialized. Stopping script.");
    } else {
        log(LOG.INFO, "Program loop timer initialized");
    }
    
    log(LOG.DEBUG, "Calling startup function in 2 seconds: Load controls data from storage.");
    Timer.set(4000, false, LoadSavedControldata);
    
    log(LOG.DEBUG, "Calling startup function in 4 seconds: Request controls data from server.");
    Timer.set(6000, false, RequestControldata);
}

// Local data functions
function LoadSavedControldata() {
    log(LOG.INFO, "Checking for existing data in local storage...");
    try {
        GetStorageValue('metadata', LoadSavedControldataCallback);
    } catch(e) {
        log(LOG.INFO, "Saved data not found in local storage: " + e);
    }
}

function LoadSavedControldataCallback(result) {
    if (!result) {
        log(LOG.WARN, "Saved control data not found from local storage.");
        return;
    }
    
    let data;
    try {
        data = JSON.parse(result);
        result = null;
        
        if (!data || typeof data !== "object") {
            log(LOG.WARN, "Invalid JSON structure in saved data.");
            return;
        }        

        deviceChannels = data.channels;
        lastRequest = data.timestamp;
        jsonValidUntil = data.valid_until;
        data = null;
        log(LOG.DEBUG, "Found controls data from local storage.");
        log(LOG.DEBUG, "Controlled channels: " + deviceChannels + ", valid until: " + jsonValidUntil + ", api endpoint: " + CONFIG.apiEndpoint);
        controlsData = true;
        controlsReady = true;
    } catch (e) {
        log(LOG.INFO, "Could not parse metadata from local storage: " + e);
    }
}

function SetStorageValue(baseKey, value) {
    try {
        GetStorageValue(baseKey, function (result) {
            let previousParts = 0;
            if (result) {
                try {
                    let parsedData = JSON.parse(result);
                    result = null;
                    if (parsedData.chunks !== undefined) {
                        previousParts = parsedData.chunks;
                        parsedData = null;
                    }
                } catch (e) {
                    log(LOG.ERROR, "Failed to parse stored chunk data for key " + baseKey);
                }
            } else {
                log(LOG.DEBUG, "No previous chunks found for key " + baseKey);
            }
            SetStorageValueCallback(baseKey, value, previousParts);
        });
    } catch (e) {
        log(LOG.ERROR, "Error retrieving previous chunks for key " + baseKey + ": " + e);
        SetStorageValueCallback(baseKey, value, 0);
    }
}

function SetStorageValueCallback(baseKey, value, previousParts) {
    let storageType, chunkSize;

    if (parseFloat(shellyFwVer) >= 1.5) {
        storageType = "ScriptStorage";
        chunkSize = 1000;
    } else {
        storageType = "KVS";
        chunkSize = 200;
    }
    log(LOG.DEBUG, "Saving data to " + storageType + " with chunk size: " + chunkSize);
    
    if (!value) {
        log(LOG.ERROR, "Error while saving data to local storage: Value not given");
        return;
    }

    value = JSON.stringify(value);
    let parts = Math.ceil(value.length / chunkSize);

    // Tallenna uudet chunkit
    for (let i = 0; i < parts; i++) {
        let chunk = value.substring(i * chunkSize, (i + 1) * chunkSize);
        log(LOG.DEBUG, "Chunk length: " + chunk.length);
        let key = baseKey + "_" + i; 

        if (storageType === "KVS") {
            enqueueShellyCall("KVS.Set", { "key": key, "value": chunk }, function(res, errCode, errMsg) {
                SetKvsValueCallback(res, errCode, errMsg, key, null, null);
            });
        } else {
            Script.storage.setItem(key, chunk);
            log(LOG.DEBUG, "Saved chunk " + key + " to " + storageType);
        }
    }

    // Poista ylimääräiset chunkit, jos uusia on vähemmän kuin vanhoja
    if (previousParts > parts) {
        log(LOG.DEBUG, "Removing " + (previousParts - parts) + " old chunks.");
        for (let i = parts; i < previousParts; i++) {
            let key = baseKey + "_" + i;
            if (storageType === "KVS") {
                enqueueShellyCall("KVS.Delete", { "key": key }, function() {
                    log(LOG.DEBUG, "Deleted old chunk: " + key);
                });
            } else {
                Script.storage.removeItem(key);
                log(LOG.DEBUG, "Deleted old chunk: " + key + " from " + storageType);
            }
        }
    }

    // Päivitä chunkien määrän tallennus
    let countValue = JSON.stringify({ chunks: parts });
    if (storageType === "KVS") {
        enqueueShellyCall("KVS.Set", { "key": baseKey, "value": countValue }, function(res, errCode, errMsg) {
            SetKvsValueCallback(res, errCode, errMsg, null, baseKey, parts);
        });
    } else {
        Script.storage.setItem(baseKey, countValue);
        log(LOG.DEBUG, "Saved key " + baseKey + " in " + parts + " parts.");
    }
}


function SetKvsValueCallback(res, errCode, errMsg, key, baseKey, parts) {
    if (errCode === 0) {
        if (key) {
            log(LOG.DEBUG, "Saved chunk " + key + " to KVS.");
        } else if (baseKey && parts) {
            log(LOG.DEBUG, "Saved " + baseKey + " to KVS, chunks count: " + parts);
        }
    } else {
        log(LOG.ERROR, "Error while saving data to KVS: " + errMsg);
    }
}

function GetStorageValue(baseKey, callback) {
    let storageType = parseFloat(shellyFwVer) >= 1.5 ? "ScriptStorage" : "KVS";

    if (storageType === "KVS") {
        enqueueShellyCall("KVS.Get", { "key": baseKey }, function(res, errCode, errMsg) {
            handleKvsCountRetrieval(res, errCode, errMsg, baseKey, callback);
        });
    } else {
        let countStr = Script.storage.getItem(baseKey);
        if (!countStr) {
            log(LOG.WARN, "Could not find local data for key: " + baseKey);
            callback(null);
            return;
        }

        let parts = parseInt(JSON.parse(countStr).chunks, 10);
        if (isNaN(parts)) {
            log(LOG.ERROR, "Chunks count is not valid number.");
            callback(null);
            return;
        }

        let fullValue = "";
        for (let i = 0; i < parts; i++) {
            let key = baseKey + "_" + i;
            let chunk = Script.storage.getItem(key);
            if (chunk !== null) {
                fullValue += chunk;
            }
            key = null;
            chunk = null;
        }

        callback(fullValue);
    }
}

function handleKvsCountRetrieval(res, errCode, errMsg, baseKey, callback) {
    
    if (errCode !== 0) {
        log(LOG.ERROR, "KVS.GetMany error: " + errMsg);
        callback(null);
        return;
    }

    try {
        let parts = parseInt(JSON.parse(res.value).chunks, 10);

        if (isNaN(parts)) {
            log(LOG.ERROR, "Chunks count is not valid number.");
            callback(null);
            return;
        }

        enqueueShellyCall("KVS.GetMany", { "match": baseKey + "_?", "offset": 0 }, function(res, errCode, errMsg) {
            handleKvsRetrieval(res, errCode, errMsg, baseKey, callback);            
        });

    } catch (e) {
        log(LOG.ERROR, "Invalid value.")
    }  
}

function handleKvsRetrieval(res, errCode, errMsg, baseKey, callback) {
    if (errCode !== 0) {
        log(LOG.ERROR, "KVS.GetMany error: " + errMsg);
        callback(null);
        return;
    }

    if (!res.items || res.items.length === 0) {
        log(LOG.INFO, "No stored chunks found for " + baseKey);
        callback(null);
        return;
    }

    try {
        let keys = KvsGetManySort(Object.keys(res.items));

        let fullValue = "";
        for (let i = 0; i < keys.length; i++) {
            fullValue += res.items[keys[i]].value;
        }
        callback(fullValue);
    } catch (e) {
        log(LOG.ERROR, "Error retrieving chunks for " + baseKey + ": " + e);
        callback(null);
    }
}

function KvsGetManySort(keys) {
    let length = keys.length;
    for (let i = 0; i < length - 1; i++) {
        for (let j = 0; j < length - i - 1; j++) {
            let numA = parseInt(keys[j].split("_")[1]); 
            let numB = parseInt(keys[j + 1].split("_")[1]);

            if (numA > numB) {
                // Vaihdetaan paikkoja ilman sort()-metodia
                let temp = keys[j];
                keys[j] = keys[j + 1];
                keys[j + 1] = temp;
            }
        }
    }
    return keys;
}

// Server request
function RequestControldata() {
    try {
        log(LOG.INFO, "Requesting control data from server...");
        let urlToCall = CONFIG.apiEndpoint + "?device_mac=" + shellyMac + "&last_request=" + (lastRequest || 0) + "&script_version=" + VERSION + "&client_model=" + shellyApp + "&client_fw=" + shellyFwVer + "&cut_schedule=" + CONFIG.returnTimestamps + "&json_version=" + CONFIG.jsonVersion + "&json_channel_names=" + CONFIG.jsonChannelNames;
        log(LOG.DEBUG, "URL: " + urlToCall);
        enqueueShellyCall("HTTP.GET", { "url": urlToCall, "timeout": 10, "ssl_ca": "*" }, RequestControldataCallback);
        urlToCall = null;
    } catch (e) {
        log(LOG.ERROR, "Error while requesting control data from server: " + e);
        controlsReady = true;
        cyclesUntilRequest = 18 + Math.floor(3 * Math.random());
        mainCycleCounter = 1;
        log(LOG.DEBUG, "Resetting request cycle counter. Cycles before next request: " + cyclesUntilRequest);
    }
}

function RequestControldataCallback(res, errCode, errMsg) {
    let requestInfo;
    
    if (errCode != 0) {
        log(LOG.ERROR, "Request error: " + errCode, errMsg);
        return;
    }
    
    if (!res) {
        log(LOG.ERROR, "Invalid response: " + errCode, errMsg);
        return;
    }

    try {
        if (res.code === 200) {
            requestInfo = 'Get controls successful. Code 200.';
            
            let metadata = JSON.parse(res.body).metadata
            SetStorageValue('metadata', metadata);
            SetStorageValue('controls', JSON.parse(res.body).controls);
            res = null;

            deviceChannels = parseInt(metadata.channels);
            CONFIG.apiEndpoint = metadata.fetch_url;
            lastRequest = parseInt(metadata.timestamp);
            jsonValidUntil = parseInt(metadata.valid_until);
            metadata = null;

            controlsData = true;

            log(LOG.DEBUG, "Controls JSON parsed.");
            log(LOG.DEBUG, "Controlled channels: " + deviceChannels + ", valid until: " + jsonValidUntil + ", api endpoint: " + CONFIG.apiEndpoint);
        } else if (res.code === 204) {
            requestInfo = "Device found from server without associated loads: " + res.code;
            res = null;
        } else if (res.code === 304) {
            requestInfo = "Controls data not updated after last request: " + res.code;
            res = null;
        } else {
            requestInfo = "Invalid server request. Code: " + res.code;
            res = null;
        }
    } catch (e) {
        log(LOG.ERROR, "Control data request failed: " + e)
    }
     
    log(LOG.INFO, "Server request done. " + requestInfo);
    requestInfo = null;
    controlsReady = true;

    cyclesUntilRequest = 18 + Math.floor(3 * Math.random());
    mainCycleCounter = 1;
    log(LOG.DEBUG, "Resetting request cycle counter. Cycles before next request: " + cyclesUntilRequest);
}

// Control data functions
function CheckControlData() {
    log(LOG.DEBUG, "Checking if control data is valid."); 
    currentUnixTime = Math.floor(Date.now() / 1000);

    if (controlsData && jsonValidUntil <= currentUnixTime) {      
        log(LOG.WARN, "The control schedule is empty. Activating failsafe mode.");
        isFailsafe = true;
        return;        
    }

    if (!controlsData) {
        log(LOG.WARN, "Control data not available. Activating failsafe mode.");
        isFailsafe = true;
        return;
    }

    log(LOG.DEBUG, "Control data is valid for " + parseInt((jsonValidUntil - currentUnixTime) / 60) + " minutes");
}

function DoControls() {
    log(LOG.INFO, "Execute controls...");
	try {
		GetStorageValue('controls', DoControlsCallback);
	} catch(e) {
		log(LOG.INFO, "Error while executing controls: " + e);
	}
}

function DoControlsCallback(value) {
    currentUnixTime = Math.floor(Date.now() / 1000);
    let controls = JSON.parse(value);
    value = null;
    
    if (!controls || typeof controls !== "object") {
        log(LOG.ERROR, "Invalid JSON structure, controls not done.");
        return;
    }
    
    log(LOG.DEBUG, "Found controls data, executing controls.");
    let channelKeys = Object.keys(controls);
    if (!channelKeys || channelKeys.length == 0) {
        log(LOG.WARN, "Could not find any controlled channels from controls data.");
        return;
    }
    
    // Initialize Shelly to current state
    if (!controlsInitialized) {
        log(LOG.INFO, "Initializing relays to current states...");
        try {
            for (let channelEntry in channelKeys) {
                let switchId = parseInt(controls[channelEntry].id - 1);
                let controlState = parseInt(controls[channelEntry].state);
                let controlTimestamp = lastRequest;
                log(LOG.DEBUG, "Initializing relay " + controls[channelEntry].id);
                log(LOG.DEBUG, "JSON timestamp: " + controlTimestamp + ", channel state: " + controlState);
                
                // Järjestetään aikataulut aikajärjestykseen (vanhimmasta uusimpaan)
                let scheduleKeys = Object.keys(controls[channelEntry].schedules);
                scheduleKeys = selectionSortSchedule(scheduleKeys, controls[channelEntry].schedules);
                
                for (let scheduleEntry in scheduleKeys) {
                    if (controls[channelEntry].schedules[scheduleEntry].timestamp < currentUnixTime) {
                        controlState = parseInt(controls[channelEntry].schedules[scheduleEntry].state);
                        controlTimestamp = parseInt(controls[channelEntry].schedules[scheduleEntry].timestamp);
                        log(LOG.DEBUG, "Passed timestamp: " + controlTimestamp + ", state switched to " + controlState);
                    }
                }
                
                let params = {"id": switchId, "on": controlState === 0 ? false : true};
                enqueueShellyCall("Switch.Set", params, null);
                params = null;
                log(LOG.DEBUG, "Switched relay " +  controls[channelEntry].id + " to state " + controlState + ", timestamp: "+ controlTimestamp);
                channelLastControlTimeStamps[switchId] = controlTimestamp;	
            }
            controlsInitialized = true;
            log(LOG.INFO, "Relays initialized.");
            return;
        } catch (e) {
            log(LOG.ERROR, "Error while initializing relays to current states: " + e);
            controlsInitialized = false;
            return;
        }
    }
    
    // If initialized, read control state from schedule
    log(LOG.DEBUG, "Relays initialized, reading schedule or updated state.");
	try {
        for (let channelEntry in channelKeys) {
            let switchId =  parseInt(controls[channelEntry].id - 1);
            log(LOG.DEBUG, "Relay " + controls[channelEntry].id + ": User settings updated: " + controls[channelEntry].updated + ", last controlled timestamp:" + channelLastControlTimeStamps[switchId]);
            if (parseInt(controls[channelEntry].updated) > parseInt(channelLastControlTimeStamps[switchId])) {
                log(LOG.DEBUG, "Relay " +  parseInt(controls[channelEntry].id) + ": User settings changed after last controlled timestamp. Controlling to current state.");
                let controlState = parseInt(controls[channelEntry].state);
                let controlTimestamp = currentUnixTime;
                let params = {"id": switchId, "on": controlState === 0 ? false : true};
                enqueueShellyCall("Switch.Set", params, null);
                params = null;
                log(LOG.DEBUG, "Switched relay " + controls[channelEntry].id + " to state " + controlState + ", timestamp: "+ controlTimestamp);
                channelLastControlTimeStamps[switchId] = controlTimestamp;
            } else {
                log(LOG.DEBUG,  "Relay " + controls[channelEntry].id + ": User settings not updated, reading schedule for passed timestamps.");
                let scheduleKeys = Object.keys(controls[channelEntry].schedules);
                for (let scheduleEntry in scheduleKeys) {
                    if ((currentUnixTime >= controls[channelEntry].schedules[scheduleEntry].timestamp) && (controls[channelEntry].schedules[scheduleEntry].timestamp > channelLastControlTimeStamps[switchId])) {
                        let controlState = parseInt(controls[channelEntry].schedules[scheduleEntry].state);
                        let controlTimestamp = parseInt(controls[channelEntry].schedules[scheduleEntry].timestamp);
                        let params = {"id": switchId, "on": controlState === 0 ? false : true};
                        enqueueShellyCall("Switch.Set", params, null);
                        params = null;
                        log(LOG.DEBUG, "Switched relay " + controls[channelEntry].id + " to state " + controlState + ", timestamp: "+ controlTimestamp);
                        channelLastControlTimeStamps[switchId] = controlTimestamp;
                    }
                }
                log(LOG.DEBUG, "Schedule read.");
            }
        }
        log(LOG.INFO, "Controls executed.");
    } catch (e) {
        log(LOG.ERROR, "Controls not executed due to unknown error: " + e);
    }
}

// Shelly call queue
function enqueueShellyCall(method, params, callback) {
    shellyCallQueue.push({ method: method, params: params, callback: callback });
    
    if (!isCallBusy && !isCallDelay) {
        processShellyCallQueue();
    }
}

function processShellyCallQueue() {
    if (isCallBusy || shellyCallQueue.length === 0) {
        isCallDelay = false;
        return;
    }

    isCallBusy = true;
    let callToExecute = shellyCallQueue[0];
    shellyCallQueue.splice(0, 1); 
    Shelly.call(callToExecute.method, callToExecute.params, function (res, errCode, errMsg) {
        if (callToExecute.callback) {
            callToExecute.callback(res, errCode, errMsg);
        }
        isCallBusy = false;

        if (shellyCallQueue.length === 0) {
            log(LOG.DEBUG, "Call queue is empty.");
            return;
        }

        if (shellyCallQueue[0].method === "Switch.Set" && callToExecute.method === "Switch.Set") {
            log(LOG.DEBUG, "Consecutive calls are Switch.Set, setting a delay");
            isCallDelay = true;
            Timer.set(5000, false, function () {
                isCallDelay = false;
                processShellyCallQueue(); // Recurse after delay
            });
        } else {
            log(LOG.DEBUG, "No consecutive Switch.Set calls, delay is not needed.");
            isCallDelay = false;
            processShellyCallQueue(); // Continue processing without delay
        }        
    });
}

// Sort schedule for initialization
function selectionSortSchedule(keys, schedules) {
    let n = keys.length;
    for (let i = 0; i < n - 1; i++) {
        let minIndex = i;
        for (let j = i + 1; j < n; j++) {
            if (schedules[keys[j]].timestamp < schedules[keys[minIndex]].timestamp) {
                minIndex = j;
            }
        }
        
        let temp = keys[i];
        keys[i] = keys[minIndex];
        keys[minIndex] = temp;
    }
    return keys;
}

// Failsafe logic
function DoFailsafeControls() {
    return;
}

// Script cycle
function MainCycle() {
    log(LOG.INFO, "Cycle " + mainCycleCounter + "/" + cyclesUntilRequest + " until next request.");
    
    CheckControlData();
    
    if ((!isFailsafe) && controlsData && controlsReady) {
        DoControls();
    }
    
    if (isFailsafe) {
        DoFailsafeControls();
    }
    
    if (mainCycleCounter >= cyclesUntilRequest) {
        controlsReady = false;
        RequestControldata();
    }
    
    mainCycleCounter++;
}

// Start program
init()
