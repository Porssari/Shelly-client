let VERSION = "Shelly-3.0.0-rc1";

// Settings
let CONFIG = {
    updatePeriod: 15000,
    apiEndpoint: "https://api.porssari.fi/getcontrols.php",
    returnTimestamps: 10,
    jsonVersion: 2,
    jsonChannelNames: false,
    logLevel: 0, // 0=debug, 1=info, 2=warn, 3=error
};

// Global variables
let shellyApp, shellyMac, shellyFwVer, scriptId, deviceChannels, storageType;
let currentUnixTime, jsonValidUntil, shellyUptime;
let lastRequest, lastRequestHttpCode;
let controlsData = virtualStatesReady = controlsInitialized = isTaskBusy = isTaskDelay = isFailsafe = false;
let mainCycleCounter = 20;
let cyclesUntilRequest = 20;
let mainTimer;

// Global dictionaries
let channelLastControlTimeStamps = [];
let relayStates = [];
let taskQueue = [];

// Logger
const LOG = {
    DEBUG: 0,
    INFO: 1,
    WARN: 2,
    ERROR: 3
};

// Program init functions
function init() {
    (CONFIG.logLevel <= LOG.ERROR) && console.log("Pörssäri Control Script, version: " + VERSION);
    try {
        (CONFIG.logLevel <= LOG.INFO) && console.log("Retrieving device information...");
        enqueueTask('shellycall', 'Shelly.GetDeviceInfo', {}, InitCallback);
    } catch (e) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("An error occurred while retrieving device information. Stopping script. " + e);
        return;
    }
}

function InitCallback(result) {
    shellyApp = result.app;
    shellyMac = result.mac;
    shellyFwVer = result.ver;
    result = null;
    scriptId = (parseFloat(shellyFwVer) >= 1.5) ? Script.id : Shelly.getCurrentScriptId();
    
    if (shellyMac.length > 0) {
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Device info: device " + shellyApp + ", id " + shellyMac + ", firmware version " + shellyFwVer + ", script-id " + scriptId);
    } else {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Could not get valid device information. Stopping script.");
        return;
    }

    storageType = parseFloat(shellyFwVer) >= 1.5 ? "ScriptStorage" : "KVS";
    //storageType = "KVS";
    
    // Program loop timer
    mainTimer = Timer.set(CONFIG.updatePeriod, true, MainCycle);
    if (!mainTimer) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Main timer not initialized. Stopping script.");
    } else {
        (CONFIG.logLevel <= LOG.INFO) && console.log("Program loop timer initialized");
    }
    
    (CONFIG.logLevel <= LOG.DEBUG) && console.log("Calling startup function in 1 seconds: Load controls data from storage.");
    Timer.set(1000, false, LoadSavedControldata);
    
    (CONFIG.logLevel <= LOG.DEBUG) && console.log("Calling startup function in 5 seconds: Request controls data from server.");
    Timer.set(5000, false, RequestControldata);
}

// Local data functions
function LoadSavedControldata() {
    (CONFIG.logLevel <= LOG.INFO) && console.log("Checking for existing data in local storage...");
    try {
        GetStorageValue('metadata', LoadSavedControldataCallback);
    } catch(e) {
        (CONFIG.logLevel <= LOG.INFO) && console.log("Saved data not found in local storage: " + e);
    }
}

function LoadSavedControldataCallback(result) {
    if (!result) {
        (CONFIG.logLevel <= LOG.INFO) && console.log("Saved control data not found from local storage.");
        return;
    }
    
    let data;
    try {
        data = JSON.parse(result);
        result = null;
        
        if (!data || typeof data !== "object") {
            (CONFIG.logLevel <= LOG.ERROR) && console.log("Invalid JSON structure in saved data.");
            return;
        }        

        deviceChannels = data.channels;
        lastRequest = data.timestamp;
        jsonValidUntil = data.valid_until;
        data = null;
        (CONFIG.logLevel <= LOG.INFO) && console.log("Found controls data from local storage.");
        controlsData = true;
        controlsReady = true;
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Controlled channels: " + deviceChannels + ", valid until: " + jsonValidUntil + ", api endpoint: " + CONFIG.apiEndpoint);
    } catch (e) {
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Saved control data not found from local storage: " + e);
    }
}

function SetStorageValue(baseKey, value) {

    let chunkSize = (storageType === "ScriptStorage") ? 1000 : (storageType === "KVS" ? 240 : 0);

    (CONFIG.logLevel <= LOG.DEBUG) && console.log("Saving data " + baseKey + " to " + storageType + " with chunk size: " + chunkSize);

    if (!value) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Error while saving data to local storage: Value not given");
        return;
    }

    //value = JSON.stringify(value);
    value = btoa(JSON.stringify(value));
    let parts = Math.ceil(value.length / chunkSize);
    let chunks = [];

    for (let i = 0; i < parts; i++) {
        let chunk = value.substring(i * chunkSize, (i + 1) * chunkSize);
        let key = baseKey + "_" + i;
        chunks[key] = chunk;
        chunk = null;
    }
    value = null;

    try {
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Check for previous chunks count for key " + baseKey);
        
        if (storageType === "KVS") {
            enqueueTask("shellycall", "KVS.List", { "match": baseKey + "_*", "offset": 0 }, function (res, errCode, errMsg) {

                let previousParts = 0;
            
                if (errCode !== 0) {
                    (CONFIG.logLevel <= LOG.DEBUG) && console.log("Error fetching existing chunks from KVS for " + baseKey);
                    SetStorageValueCallback(baseKey, chunks, parts, previousParts);
                    return;
                }

                if (!res) {
                    (CONFIG.logLevel <= LOG.DEBUG) && console.log("No previous chunks found from KVS for key " + baseKey);
                    SetStorageValueCallback(baseKey, chunks, parts, previousParts);
                    return;
                }
            
                previousParts = Object.keys(res.keys).length;
                res = null;        
                (CONFIG.logLevel <= LOG.DEBUG) && console.log("Found " + previousParts + " chunks from KVS for key " + baseKey);     
                SetStorageValueCallback(baseKey, chunks, parts, previousParts);
            });
        } else if (storageType === "ScriptStorage") {
            
            let previousParts = 0;

            for (let i = 0; i < Script.storage.length; i++) {
                const key = Script.storage.key(i);
                if (key.indexOf(baseKey) === 0) {
                    previousParts += 1;
                }
            }
            (CONFIG.logLevel <= LOG.DEBUG) && console.log("Found " + previousParts + " chunks from ScriptStorage for key " + baseKey);
            SetStorageValueCallback(baseKey, chunks, parts, previousParts);
            return;
        } else {
            (CONFIG.logLevel <= LOG.ERROR) && console.log("Unknown storage type: " + storageType);
            return;
        }
    } catch (e) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Error retrieving previous chunks for key " + baseKey + ": " + e);
        SetStorageValueCallback(baseKey, chunks, parts, 0);
    }
}

function SetStorageValueCallback(baseKey, chunks, parts, previousParts) {
    for (let key in chunks) {
        if (storageType === "KVS") {
            enqueueTask("shellycall", "KVS.Set", { "key": key, "value": chunks[key] }, null);
        } else if (storageType === "ScriptStorage") {
            enqueueTask("storage", "setItem", { "key": key, "value": chunks[key]}, null);            
        } else {
            (CONFIG.logLevel <= LOG.ERROR) && console.log("Unknown storage type: " + storageType);
            return;
        }
        chunks[key] = null;
    }
    chunks = null;

    if (previousParts > parts) {
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Removing " + (previousParts - parts) + " old chunks.");
        for (let i = parts; i < previousParts; i++) {
            let key = baseKey + "_" + i;
            if (storageType === "KVS") {
                enqueueTask("shellycall", "KVS.Delete", { "key": key }, function() {
                    (CONFIG.logLevel <= LOG.DEBUG) && console.log("Deleted old chunk: " + key);
                });
            } else {
                enqueueTask("storage", "removeItem", {"key": key}, function() {
                    (CONFIG.logLevel <= LOG.DEBUG) && console.log("Deleted old chunk: " + key + " from " + storageType);
                });
            }
        }
    }

    let countValue = JSON.stringify({ chunks: parts });
    if (storageType === "ScriptStorage") {
        enqueueTask("storage", "setItem", {"key": baseKey, "value": countValue}, function() {
            (CONFIG.logLevel <= LOG.DEBUG) && console.log("Saved key " + baseKey + " in " + parts + " parts.");
        });
    }
}

function GetStorageValue(baseKey, callback) {
    if (storageType === "KVS") {
        enqueueTask("shellycall", "KVS.GetMany", { "match": baseKey + "_?", "offset": 0 }, function(res, errCode, errMsg) {
            handleKvsRetrieval(res, errCode, errMsg, baseKey, callback);            
        });
    } else {
        handleStorageRetrieval(baseKey, callback);
    }
}

function handleStorageRetrieval(baseKey, callback) {

    let parts = 0;

    for (let i = 0; i < Script.storage.length; i++) {
        const key = Script.storage.key(i);
        if (key.indexOf(baseKey) === 0) {
            parts += 1;
        }
    }

    let fullValue = "";

    for (let i = 0; i < parts; i++) {
        let keyToFind = baseKey + "_" + i;
        for (let j = 0; j < Script.storage.length; j++) {
            const key = Script.storage.key(j);
            if (key === keyToFind) {
                fullValue += Script.storage.getItem(key);
                break;           
            }  
        }
    }

    callback(atob(fullValue));
    callback = null;
    fullValue = null;

}

function handleKvsRetrieval(res, errCode, errMsg, baseKey, callback) {
    if (errCode !== 0) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("KVS.GetMany error with chunks for " + baseKey + ": " + errMsg);
        callback(null);
        callback = null;
        return;
    }

    if (!res.items || res.items.length === 0) {
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("No stored chunks found for " + baseKey);
        callback(null);
        callback = null;
        return;
    }

    try {
        let data = res.items;
        res = null;

        let fullValue = "";

        for (let i = 0; i < data.length; i++) {
            let keyToFind = baseKey + "_" + i;
            for (let j = 0; j < data.length; j++) {
                if (data[j].key === keyToFind) {
                    fullValue += data[j].value;
                    data[j].value = null;
                    break;
                }
            }  
        }

        callback(atob(fullValue));
        callback = null;
        fullValue = null; 
    } catch (e) {
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Error retrieving chunks for " + baseKey + ": " + e);
        callback(null);
        callback = null;
    }
}

// Server request
function RequestControldata() {
    try {
        (CONFIG.logLevel <= LOG.INFO) && console.log("Requesting control data from server...");
        let urlToCall = CONFIG.apiEndpoint + "?device_mac=" + shellyMac + "&last_request=" + (lastRequest || 0) + "&script_version=" + VERSION + "&client_model=" + shellyApp + "&client_fw=" + shellyFwVer + "&cut_schedule=" + CONFIG.returnTimestamps + "&json_version=" + CONFIG.jsonVersion + "&json_channel_names=" + CONFIG.jsonChannelNames;
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("URL: " + urlToCall);
        enqueueTask("shellycall", "HTTP.GET", { "url": urlToCall, "timeout": 10, "ssl_ca": "*" }, RequestControldataCallback);
        urlToCall = null;
    } catch (e) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Error while requesting control data from server: " + e);
        controlsReady = true;
        cyclesUntilRequest = 18 + Math.floor(3 * Math.random());
        mainCycleCounter = 1;
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Resetting request cycle counter. Cycles before next request: " + cyclesUntilRequest);
    }
}

function RequestControldataCallback(res, errCode, errMsg) {
    let requestInfo;
    
    if (errCode != 0) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Request error: " + errCode, errMsg);
        return;
    }
    
    if (!res) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Invalid response: " + errCode, errMsg);
        return;
    }

    try {
        if (res.code === 200) {
            requestInfo = 'Get controls successful. Code 200.';

            let parsedBody = JSON.parse(res.body);
            res = null; 
            
            let metadata = parsedBody.metadata;
            let controls = parsedBody.controls;
            parsedBody = null;

            SetStorageValue('controls', controls);
            controls = null;

            SetStorageValue('metadata', metadata);
            deviceChannels = parseInt(metadata.channels);
            CONFIG.apiEndpoint = metadata.fetch_url;
            lastRequest = parseInt(metadata.timestamp);
            jsonValidUntil = parseInt(metadata.valid_until);
            metadata = null;        
        
            controlsData = true;

            (CONFIG.logLevel <= LOG.DEBUG) && console.log("Controls JSON parsed.");
            (CONFIG.logLevel <= LOG.DEBUG) && console.log("Controlled channels: " + deviceChannels + ", valid until: " + jsonValidUntil + ", api endpoint: " + CONFIG.apiEndpoint);
        } else if (res.code === 204) {
            requestInfo = "Device found from server without associated loads: " + res.code;
            res = null;
        } else if (res.code === 304) {
            requestInfo = "Controls data not updated after last request: " + res.code;
            res = null;
        } else {
            requestInfo = "Invalid server request. Code: " + res.code;
            res = null;
        }
    } catch (e) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Control data request failed: " + e)
    }
     
    (CONFIG.logLevel <= LOG.INFO) && console.log("Server request done. " + requestInfo);
    requestInfo = null;
    controlsReady = true;

    cyclesUntilRequest = 18 + Math.floor(3 * Math.random());
    mainCycleCounter = 1;
    (CONFIG.logLevel <= LOG.DEBUG) && console.log("Resetting request cycle counter. Cycles before next request: " + cyclesUntilRequest);
}

// Control data functions
function CheckControlData() {
    (CONFIG.logLevel <= LOG.DEBUG) && console.log("Checking if control data is valid."); 
    currentUnixTime = Math.floor(Date.now() / 1000);
    isFailsafe = false;

    if (controlsData && jsonValidUntil <= currentUnixTime) {      
        (CONFIG.logLevel <= LOG.INFO) && console.log("The control schedule is empty. Activating failsafe mode.");
        isFailsafe = true;            
    }

    if (!controlsData) {
        (CONFIG.logLevel <= LOG.INFO) && console.log("Control data not available. Activating failsafe mode.");
        isFailsafe = true;
    }

    if (isFailsafe) {
        if (mainCycleCounter > cyclesUntilRequest) {
            cyclesUntilRequest = 18 + Math.floor(3 * Math.random());
            mainCycleCounter = 1;
            (CONFIG.logLevel <= LOG.DEBUG) && console.log("Resetting request cycle counter. Cycles before next request: " + cyclesUntilRequest);
        }
        return;    
    }

    (CONFIG.logLevel <= LOG.INFO) && console.log("Control data is valid for " + parseInt((jsonValidUntil - currentUnixTime) / 60) + " minutes");
}

function DoControls() {
    (CONFIG.logLevel <= LOG.INFO) && console.log("Updating virtual states for relays...");
    virtualStatesReady = false;
    GetStorageValue('controls', DoControlsCallback);
}

function DoControlsCallback(value) {
    currentUnixTime = Math.floor(Date.now() / 1000);
    let controls = JSON.parse(value);
    value = null;
    
    if (!controls || typeof controls !== "object") {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Invalid JSON structure, virtual states not updated.");
        return;
    }
    
    (CONFIG.logLevel <= LOG.DEBUG) && console.log("Found controls data, updating virtual states...");
    let channelKeys = Object.keys(controls);
    if (!channelKeys || channelKeys.length == 0) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Could not find any controlled channels from controls data.");
        controls = null;
        return;
    }
    
    // Initialize Shelly to current state
    if (!controlsInitialized) {
        (CONFIG.logLevel <= LOG.INFO) && console.log("Script has started, initializing virtual states...");
        try {
            for (let channelEntry in channelKeys) {
                let switchId = parseInt(controls[channelEntry].id - 1);
                let controlState = parseInt(controls[channelEntry].state);
                let controlTimestamp = lastRequest;
                (CONFIG.logLevel <= LOG.DEBUG) && console.log("Relay " + controls[channelEntry].id + ": initializing...");
                (CONFIG.logLevel <= LOG.DEBUG) && console.log("Relay " + controls[channelEntry].id + ": initial JSON state: " + controlState);
                
                // Järjestetään aikataulut aikajärjestykseen (vanhimmasta uusimpaan)
                let scheduleKeys = Object.keys(controls[channelEntry].schedules);
                scheduleKeys = selectionSortSchedule(scheduleKeys, controls[channelEntry].schedules);
                
                for (let scheduleEntry in scheduleKeys) {
                    if (controls[channelEntry].schedules[scheduleEntry].timestamp < currentUnixTime) {
                        controlState = parseInt(controls[channelEntry].schedules[scheduleEntry].state);
                        controlTimestamp = parseInt(controls[channelEntry].schedules[scheduleEntry].timestamp);
                        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Relay " + controls[channelEntry].id + ": passed timestamp: " + controlTimestamp + ", state: " + controlState);
                    }
                }
                
                updateVirtualState(switchId, controlState);
                channelLastControlTimeStamps[switchId] = controlTimestamp;	
            }
            controls = null;
            controlsInitialized = true;
            virtualStatesReady = true;
            (CONFIG.logLevel <= LOG.INFO) && console.log("Virtual states initialized.");
            return;
        } catch (e) {
            controls = null;
            controlsInitialized = false;
            virtualStatesReady = true;
            (CONFIG.logLevel <= LOG.ERROR) && console.log("Error while initializing virtual states: " + e);
            return;
        }
    }
    
    // If initialized, read control state from schedule
    (CONFIG.logLevel <= LOG.INFO) && console.log("Reading schedule or updated state...");
	try {
        for (let channelEntry in channelKeys) {
            let switchId =  parseInt(controls[channelEntry].id - 1);
            (CONFIG.logLevel <= LOG.DEBUG) && console.log("Relay " + controls[channelEntry].id + ": settings updated: " + controls[channelEntry].updated + ", last controlled timestamp:" + channelLastControlTimeStamps[switchId]);
            if (parseInt(controls[channelEntry].updated) > parseInt(channelLastControlTimeStamps[switchId])) {
                (CONFIG.logLevel <= LOG.DEBUG) && console.log("Relay " + parseInt(controls[channelEntry].id) + ": settings updated since the last control timestamp. Switching to the current state.");
                let controlState = parseInt(controls[channelEntry].state);
                let controlTimestamp = currentUnixTime;
                updateVirtualState(switchId, controlState);
                channelLastControlTimeStamps[switchId] = controlTimestamp;
            } else {
                (CONFIG.logLevel <= LOG.DEBUG) && console.log("Relay " + controls[channelEntry].id + ": settings not updated since the last control timestamp. Reading schedule for the passed timestamps.");
                let scheduleKeys = Object.keys(controls[channelEntry].schedules);
                for (let scheduleEntry in scheduleKeys) {
                    if ((currentUnixTime >= controls[channelEntry].schedules[scheduleEntry].timestamp) && (controls[channelEntry].schedules[scheduleEntry].timestamp > channelLastControlTimeStamps[switchId])) {
                        let controlState = parseInt(controls[channelEntry].schedules[scheduleEntry].state);
                        let controlTimestamp = parseInt(controls[channelEntry].schedules[scheduleEntry].timestamp);
                        updateVirtualState(switchId, controlState);
                        channelLastControlTimeStamps[switchId] = controlTimestamp;
                        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Relay " + controls[channelEntry].id + ": passed timestamp: " + controlTimestamp + ", state: " + controlState);
                    }
                }
                (CONFIG.logLevel <= LOG.DEBUG) && console.log("Relay " + parseInt(controls[channelEntry].id) + ": schedule read.");
            }
        }
        controls = null;
        (CONFIG.logLevel <= LOG.INFO) && console.log("Virtual states updated.");
    } catch (e) {
        controls = null;
        (CONFIG.logLevel <= LOG.INFO) && console.log("Virtual states not updated due to unknown error: " + e);
    }
    virtualStatesReady = true;
}

function updateVirtualState(switchId, state) {
    if (!relayStates[switchId]) {
        relayStates[switchId] = { id: null, virtualState: 0, realState: 0, updated: false, checked: false };
    }

    relayStates[switchId].virtualState = state;
    relayStates[switchId].id = switchId;
    relayStates[switchId].updated = true;
    relayStates[switchId].checked = false;

    (CONFIG.logLevel <= LOG.DEBUG) && console.log("Updated virtualState for switch " + switchId +": new virtual state: " + relayStates[switchId].virtualState);
}

function CheckRelayStates() {

    if (!relayStates) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Could not find any controlled relays.");
        return;
    }

    let relayKeys = Object.keys(relayStates);

    if (!relayKeys || relayKeys.length == 0) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Could not find any controlled relays.");
        return;
    }
    (CONFIG.logLevel <= LOG.INFO) && console.log("Checking relay states...");

    for (let relayEntry in relayKeys) {
        let switchId = relayStates[relayEntry].id;
        enqueueTask("shellycall", "Switch.GetStatus", { id: switchId }, CheckRelayStatesCallback);
    }
}

function CheckRelayStatesCallback(res, errCode, errMsg) {

    if (errCode !== 0 || !res) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Error with switch data." + errMsg);
        return;
    }
    
    try {
        let switchId = parseInt(res.id);
        relayStates[switchId].realState = res.output ? 1 : 0;
        res = null;
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Updated state information for switch " + switchId +": virtual state: " + relayStates[switchId].virtualState + ", real state: " + relayStates[switchId].realState + ", updated: " + relayStates[switchId].updated + ", checked: " + relayStates[switchId].checked);

        if (relayStates[switchId].updated) {
            (CONFIG.logLevel <= LOG.DEBUG) && console.log("Virtual state updated for switch " + switchId + ", executing controls...");
            let state = relayStates[switchId].virtualState;
            enqueueTask("shellycall", "Switch.Set", { "id": switchId, "on": state === 1 ? true : false }, function() {
                relayStates[switchId].updated = false;
                let relay = switchId + 1;
                (CONFIG.logLevel <= LOG.INFO) && console.log("Relay " + relay + ": switched to state: " + state);   
            });
            return;
        }

        if ((!relayStates[switchId].checked) && (relayStates[switchId].virtualState !== relayStates[switchId].realState)) {
            (CONFIG.logLevel <= LOG.DEBUG) && console.log("State not updated correctly for switch " + switchId + ", executing controls...");
            let state = relayStates[switchId].virtualState;
            enqueueTask("shellycall", "Switch.Set", { "id": switchId, "on": state === 1 ? true : false }, function() {
                relayStates[switchId].updated = false;
                (CONFIG.logLevel <= LOG.INFO) && console.log("Switch " +  switchId + " set to state " +  state);   
            });
            return;
        } else if (!relayStates[switchId].checked) {
            let relay = switchId + 1;
            (CONFIG.logLevel <= LOG.INFO) && console.log("Relay " + relay + ": state checked after passed timestamp.");
            relayStates[switchId].checked = true;
        } else if ((relayStates[switchId].checked) && (relayStates[switchId].virtualState !== relayStates[switchId].realState)) {
            let relay = switchId + 1;
            (CONFIG.logLevel <= LOG.INFO) && console.log("Relay " + relay + ": relay state is switched by user.");
        } else if (relayStates[switchId].checked) {
            let relay = switchId + 1;
            (CONFIG.logLevel <= LOG.INFO) && console.log("Relay " + relay + ": relay state is up to date.");
        }
    } catch(e) {
        (CONFIG.logLevel <= LOG.ERROR) && console.log("Error with switch data." + e);
    }
}

// Task queue
function enqueueTask(type, method, params, callback) {
    taskQueue.push({ type: type, method: method, params: params, callback: callback || null });
    (CONFIG.logLevel <= LOG.DEBUG) && console.log("Tasks in queue: " + taskQueue.length);
    
    if (!isTaskBusy && !isTaskDelay) {
        processTaskQueue();
    }
}

// Prosessoidaan työjono
function processTaskQueue() {
    if (isTaskBusy || taskQueue.length === 0) {
        isTaskDelay = false;
        return;
    }

    isTaskBusy = true;
    try {
      let taskToExecute = taskQueue[0];
      taskQueue.splice(0, 1); 

      (CONFIG.logLevel <= LOG.DEBUG) && console.log("Running task: " + taskToExecute.method + " with params: " + JSON.stringify(taskToExecute.params));

      if (taskToExecute.type === "shellycall") {

        Shelly.call(taskToExecute.method, taskToExecute.params, function (res, errCode, errMsg) {
            
            if (taskToExecute.callback) {
                (CONFIG.logLevel <= LOG.DEBUG) && console.log("Calling callback for " + taskToExecute.method);
                taskToExecute.callback(res, errCode, errMsg);
                taskToExecute.callback = null;
            } else {
                (CONFIG.logLevel <= LOG.DEBUG) && console.log("No callback found for task: " + taskToExecute.method);
            }

            isTaskBusy = false;
            processTaskQueue();
        });
    } else if (taskToExecute.type === "storage") {
        let result;
        if (taskToExecute.method === "setItem") {
            result = Script.storage.setItem(taskToExecute.params.key, taskToExecute.params.value);
        } else if (taskToExecute.method === "getItem") {
            result = Script.storage.getItem(taskToExecute.params.key);
        } else {
            (CONFIG.logLevel <= LOG.DEBUG) && console.log("Unknown storage method: " + taskToExecute.method);
        }
        
        if (taskToExecute.callback) {
            (CONFIG.logLevel <= LOG.DEBUG) && console.log("Calling callback for storage task: " + taskToExecute.params.key);
            taskToExecute.callback(result);
            taskToExecute.callback = null;
        } else {
            (CONFIG.logLevel <= LOG.DEBUG) && console.log("No callback found for storage task: " + taskToExecute.params.key);
        }

        isTaskBusy = false;
        processTaskQueue();
    } else {
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Unknown task type: " + taskToExecute.type);
        isCallBusy = false;
        processTaskQueue();
    }
    } catch(e) {
      print(e);
    }
}

function handleTaskQueueDelay(task) {
    if (taskQueue.length === 0) {
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("All tasks has been done.");
        isTaskBusy = false;
        return;
    }

    if (taskQueue[0].method === "Switch.Set" && task.method === "Switch.Set") {
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("Consecutive Switch.Set calls detected, setting a delay before the next call.");
        isTaskBusy = false;
        isTaskDelay = true;
        Timer.set(5000, false, function () {
            isTaskDelay = false;
            processTaskQueue();
        });
    } else {
        (CONFIG.logLevel <= LOG.DEBUG) && console.log("No consecutive Switch.Set calls detected, proceeding without delay.");
        processTaskQueue();
    }
}

// Sort schedule for initialization
function selectionSortSchedule(keys, schedules) {
    let n = keys.length;
    for (let i = 0; i < n - 1; i++) {
        let minIndex = i;
        for (let j = i + 1; j < n; j++) {
            if (schedules[keys[j]].timestamp < schedules[keys[minIndex]].timestamp) {
                minIndex = j;
            }
        }
        
        let temp = keys[i];
        keys[i] = keys[minIndex];
        keys[minIndex] = temp;
    }
    return keys;
}

// Failsafe logic
function DoFailsafeControls() {
    return;
}

// Script cycle
function MainCycle() {
    (CONFIG.logLevel <= LOG.INFO) && console.log("Cycle " + mainCycleCounter + "/" + cyclesUntilRequest + " until next request.");
    
    let checkStates = CheckRelayStates();
    checkStates = null;
    
    CheckControlData();
    
    if ((!isFailsafe) && controlsData && controlsReady) {
        DoControls();
    }
    
    if (isFailsafe) {
        DoFailsafeControls();
    }
    
    if (mainCycleCounter >= cyclesUntilRequest) {
        controlsReady = false;
        RequestControldata();
    }
    
    mainCycleCounter++;
}

// Start program
init()
