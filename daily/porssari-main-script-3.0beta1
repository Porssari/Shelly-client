let VERSION = "Shelly-3.0.1-beta2";

// Settings
let CONFIG = {
    updatePeriod: 15000, 
    apiEndpoint: "https://api.porssari.fi/getcontrols.php", 
    returnTimestamps: 10, 
    jsonVersion: 2, 
    jsonChannelNames: false, 
	cyclesUntilRequest: 20,  
};

// Global variables
let shellyApp = shellyMac = shellyFwVer = scriptId = deviceChannels = null;
let currentUnixTime = jsonValidUntil = shellyUptime = null;
let lastRequest = lastRequestHttpCode = null;
let scriptInitialized = deviceInfoOk = controlsReady = controlsData = doControlsInit = isCallBusy = isCallTimer = isFailsafe = false;
let mainCycleCounter = 20;
 

// Global dictionaries
let channelLastControlTimeStamps = [];
let shellyCallQueue = [];

// Functions
function init() {
	console.log("Pörssäri Control Script, version: " + VERSION);
    try {
		console.log("Retrieving device information...")
		enqueueShellyCall('Shelly.GetDeviceInfo', {}, GetDeviceInfo);        
	} catch (error) {
		console.log("An error occurred while retrieving device information.");
		return;
	} 
}

function InitAuthentication() {
    // Authenticate Shelly to server
	try {
		console.log("Checking authentication status...")
		enqueueShellyCall('HTTP.REQUEST', 
		    {
                method: 'POST',
        	    url: CONFIG.apiEndpoint,
        	    headers: { "Content-Type": "application/json" },
        	    body: JSON.stringify({device_id: shellyMac}),
    	    },
    	    ParseAuthResponse
        );
	} catch (error) {
		console.log("Error while registering device: " + error)
	}

    if (!scriptInitialized) {
	    // Call next startup function: Check if control data already exists
	    LoadExistingControlsData();
    }
}

function LoadExistingControlsData() {
    // Check if controls data already stored
    console.log("Check if data exists in local storage.")
	try {
		GetStorageValue('metadata', function(value) {
		    deviceChannels = value.channels;
		    lastRequest = value.timestamp;
		    jsonValidUntil = value.valid_until;
		    value = null;

		    try {
                GetStorageValue('controls', function(value) {
                    if (value) {
                        console.log("Found controls data from Script storage.");
                        controlsData = true;
                    }
                    value = null;
                });
		    } catch (error) {
			    console.log("Unable to load controls data from local storage: " + error);
		    }
        });
	} catch(error) {
		print("Saved data not found from local storage: " + error);
	}
  	

    if (!scriptInitialized) {
	    // Call next startup function: Get updated data from server
	    GetControlDataFromServer()
    }	
}

function GetControlDataFromServer() {
	try {
    	console.log("Get controls-JSON.");
    	let urlToCall = CONFIG.apiEndpoint + "?device_mac=" + shellyMac + "&last_request=" + (lastRequest || 0) + "&script_version=" + VERSION + "&client_model=" + shellyApp + "&client_fw=" + shellyFwVer + "&cut_schedule=" + CONFIG.returnTimestamps + "&json_version=" + CONFIG.jsonVersion + "&json_channel_names=" + CONFIG.jsonChannelNames;
    	print('URL: ', urlToCall);
    	enqueueShellyCall("HTTP.GET", { url: urlToCall, timeout: 10, ssl_ca:"*" }, ParseControlDataResponse);
        urlToCall = null;
    } catch (error) {
        console.log("Error with control data request: " + error);
    }
}


// Callback functions
function GetDeviceInfo(result) {
    shellyApp = result.app;
    shellyMac = result.mac;
    shellyFwVer = result.ver;
    result = null;
    if (parseFloat(shellyFwVer) >= 1.5) {
        scriptId = Script.id;
    } else {
        try{
            enqueueShellyCall("Script.List", {}, GetLegacyScriptList);   
        } catch (error) {
            console.log("Error with legacy script id check: " + error);
        }
    }  

    // Check if device mac exists
    if (shellyMac.length > 0) {
        console.log("Device info: device " + shellyApp + ", id " + shellyMac + ", firmware version " + shellyFwVer + ", script-id " + scriptId);
    } else {
        console.log("Could not get valid device information.");
        return;
    }

    // Call next startup function: Script Authentication
    InitAuthentication();
}

function GetLegacyScriptList(result) {
    if (result.scripts) {
        for (let i = 0; i < result.scripts.length; i++) {  
            if ("porssari-main-script" === result.scripts[i].name) {
                scriptId = result.scripts[i].id;
                console.log("Legacy: Script-id: " + scriptId);
                break;
            }
        }
    }
}

function ParseAuthResponse(result) {
    if (result && result.code !== 200) {
        console.log("Error with register request: ", result.message);
        return;
    }

    let data;
    try {
        data = JSON.parse(result.body);
    } catch (error) {
        console.log("Invalid JSON response:", result.body);
        return;
    }
    result = null;
    if (data.private_key) {
        console.log("Got key " + data.private_key)
        //SaveJson("porssari_auth", data.private_key);   	
    } else {
        console.log("Failed to get auth key");
    }
    data = null;
}

function ParseControlDataResponse(res, error_code, error_msg) {
    let requestInfo = null;

    if (error_code != 0) {
        print("Request error: ", error_code, error_msg);
        return;
    }

    try {
        if (res.code === 200) {
            requestInfo = 'Get controls successful. Code 200.';
            SetStorageValue('metadata', JSON.parse(res.body).metadata);
            SetStorageValue('controls', JSON.parse(res.body).controls);
            let metadata = JSON.parse(res.body).metadata
            res = null;
            deviceChannels = parseInt(metadata.channels);
            CONFIG.apiEndpoint = JSON.stringify(metadata.fetch_url);
            lastRequest = parseInt(metadata.timestamp);
            jsonValidUntil = parseInt(metadata.valid_until);
            metadata = null;	
            print('Controls JSON parsed.');
            print('Device controlled channels: ', deviceChannels);
            print('Control json valid until: ', jsonValidUntil);
            print('Api endpoint: ', CONFIG.apiEndpoint);
            controlsData = true;
        } else if (res.code === 204) {
            requestInfo = 'Device found from server without associated loads: ' + res.code;
        } else if (res.code === 304) {
            requestInfo = 'Controls data not updated after last request: ' + res.code;
        } else {
            requestInfo = 'Get controls failed. Code: ' + res.code;
        }
    } catch (error) {
        console.log('Unable to save controls data: ' + error)
    }  
    CONFIG.cyclesUntilRequest = 18 + Math.floor(3 * Math.random());
    mainCycleCounter = 1;
    print('Server request done. ', requestInfo);
    requestInfo = null;
}


function SetValueCallback(res, error_code, error_message) {
    if (error_code === 0) {
        console.log("Saved succesfully: " + (parts ? parts : key));
    } else {
        console.log("Error while saving data: " + error_message);
    }
}

function handlePartRetrieval(res, error_code, error_message, parts, fullValue, retrieved, callback) {
    if (error_code === 0) {
        fullValue.value += res.value; // Koska fullValue on objekti, se säilyttää arvonsa
    }
    retrieved.value++;

    // Kun kaikki osat on haettu, palautetaan lopullinen arvo
    if (retrieved.value === parts) {
        callback(fullValue.value);
    }
}

function handleCountRetrieval(res, error_code, error_message, baseKey, callback) {
    if (error_code === 0) {
        let parts = parseInt(res.value, 10);
        let fullValue = { value: "" };  // Käytetään objektia, jotta arvo säilyy asynkronisissa kutsuissa
        let retrieved = { value: 0 };   // Samoin tälle laskurille

        for (let i = 0; i < parts; i++) {
            let key = baseKey + "_" + i;
            enqueueShellyCall("KVS.Get", { key: key }, function(res, errCode, errMsg) {
                handlePartRetrieval(res, errCode, errMsg, parts, fullValue, retrieved, callback);
            });
        }
    } else {
        console.log("Virhe osien määrän hakemisessa:", error_message);
        callback(null);
    }
}

// Storage functions
function SetStorageValue(baseKey, value) {
    let storageType = chunkSize = null;
    if (parseFloat(shellyFwVer) >= 1.5) {
        storageType = "ScriptStorage";
        chunkSize = 1000;
    } else {
        storageType = "KVS";
        chunkSize = 250;
    }
    value = JSON.stringify(value);
    let parts = Math.ceil(value.length / chunkSize); 
    for (let i = 0; i < parts; i++) {
        let chunk = value.substring(i * chunkSize, (i + 1) * chunkSize);
        let key = baseKey + "_" + i; 


        if (storageType === "KVS") {
            enqueueShellyCall("KVS.Set", { key: key, value: chunk }, SetValueCallback);
        } else {
            Script.storage.setItem(key, chunk);
        }
        chunk = key = null;
    }
    value = null;

    if (storageType === "KVS") {
        enqueueShellyCall("KVS.Set", { key: baseKey + "_count", value: parts.toString() }, SetValueCallback);
    } else {
        Script.storage.setItem(baseKey + "_count", parts.toString());
    }
    console.log("Saved " + baseKey + " to " + storageType + ", chunks count: " + parts);
    storageType = maxValueLength = parts = baseKey = null;
}

function GetStorageValue(baseKey, callback) {
    let storageType = parseFloat(shellyFwVer) >= 1.5 ? "ScriptStorage" : "KVS";

    if (storageType === "KVS") {
        enqueueShellyCall("KVS.Get", { key: baseKey + "_count" }, function(res, error_code, error_message) {
            handleCountRetrieval(res, error_code, error_message, baseKey, callback);
        });
    } else {
        let countStr = Script.storage.getItem(baseKey + "_count");
        if (!countStr) {
            console.log("ScriptStorage: Ei löydy osia avaimelle:", baseKey);
            callback(null);
            return;
        }

        let parts = parseInt(countStr, 10);
        if (isNaN(parts)) {
            console.log("ScriptStorage: _count ei ole kelvollinen numero.");
            callback(null);
            return;
        }

        let fullValue = "";
        for (let i = 0; i < parts; i++) {
            let key = baseKey + "_" + i;
            let chunk = Script.storage.getItem(key);
            if (chunk !== null) {
                fullValue += chunk;
            }
        }

        callback(fullValue);
    }
}

//  Call queue functions
function enqueueShellyCall(method, params, callback) {
    shellyCallQueue.push({ method: method, params: params, callback: callback });
    processShellyCallQueue();
}

function processShellyCallQueue() {
    if (isCallBusy || shellyCallQueue.length === 0) {
        return;
    }

    isCallBusy = true;
    let nextCall = shellyCallQueue[0]; // Hae ensimmäinen alkio
    shellyCallQueue.splice(0, 1); 

    Shelly.call(nextCall.method, nextCall.params, function (result, error) {
        if (nextCall.callback) {
            nextCall.callback(result, error);
        }
        
        isCallBusy = false;
        processShellyCallQueue(); // Suoritetaan seuraava kutsu jonosta
    });
}

init()
